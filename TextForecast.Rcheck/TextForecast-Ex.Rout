
R version 3.5.1 (2018-07-02) -- "Feather Spray"
Copyright (C) 2018 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin15.6.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "TextForecast"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> base::assign(".ExTimings", "TextForecast-Ex.timings", pos = 'CheckExEnv')
> base::cat("name\tuser\tsystem\telapsed\n", file=base::get(".ExTimings", pos = 'CheckExEnv'))
> base::assign(".format_ptime",
+ function(x) {
+   if(!is.na(x[4L])) x[1L] <- x[1L] + x[4L]
+   if(!is.na(x[5L])) x[2L] <- x[2L] + x[5L]
+   options(OutDec = '.')
+   format(x[1L:3L], digits = 7L)
+ },
+ pos = 'CheckExEnv')
> 
> ### * </HEADER>
> library('TextForecast')
Warning: replacing previous import ‘stats::filter’ by ‘dplyr::filter’ when loading ‘TextForecast’
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("get_collocations")
> ### * get_collocations
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: get_collocations
> ### Title: get_collocations function
> ### Aliases: get_collocations
> 
> ### ** Examples
> 
> ## Not run: 
> ##D st_year=2017
> ##D end_year=2018
> ##D path_name=system.file("news",package="TextForecast")
> ##D qt=paste0(sort(rep(seq(from=st_year,to=end_year,by=1),12)),c("m1","m2","m3","m4","m5","m6","m7","m8","m9","m10","m11","m12"))
> ##D z_coll=get_collocations(corpus_dates=qt[1:23],path_name=path_name,ntrms=500,ngrams_number=3,min_freq=10)
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("get_collocations", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("get_terms")
> ### * get_terms
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: get_terms
> ### Title: Title
> ### Aliases: get_terms
> 
> ### ** Examples
> 
> ## Not run: 
> ##D st_year=2017
> ##D end_year=2018
> ##D path_name=system.file("news",package="TextForecast")
> ##D qt=paste0(sort(rep(seq(from=st_year,to=end_year,by=1),12)),c("m1","m2","m3","m4","m5","m6","m7","m8","m9","m10","m11","m12"))
> ##D z_terms=get_terms(corpus_dates=qt[1:23],path.name=path_name,ntrms_words=500,ngrams_number=3,st=0,ntrms_collocation=500,min_freq=10)
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("get_terms", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("get_words")
> ### * get_words
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: get_words
> ### Title: get_words function
> ### Aliases: get_words
> 
> ### ** Examples
> 
> ## Not run: 
> ##D st_year=2017
> ##D end_year=2018
> ##D path_name=system.file("news",package="TextForecast")
> ##D qt=paste0(sort(rep(seq(from=st_year,to=end_year,by=1),12)),c("m1","m2","m3","m4","m5","m6","m7","m8","m9","m10","m11","m12"))
> ##D z_wrd=get_words(corpus_dates=qt[1:23],path_name=path_name,ntrms=500,st=0)
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("get_words", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("hard_thresholding")
> ### * hard_thresholding
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: hard_thresholding
> ### Title: hard thresholding
> ### Aliases: hard_thresholding
> 
> ### ** Examples
> 
> data("stock_data")
> data("optimal_factors")
> y=as.matrix(stock_data[,2])
> y=as.vector(y)
> w=as.matrix(stock_data[,3])
> pc=as.matrix(optimal_factors)
> t=length(y)
> news_factor <- hard_thresholding(w=w[1:(t-1),],x=pc[1:(t-1),],y=y[2:t],p_value = 0.01,newx = pc)
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("hard_thresholding", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("optimal_alphas")
> ### * optimal_alphas
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: optimal_alphas
> ### Title: Title optimal alphas function
> ### Aliases: optimal_alphas
> 
> ### ** Examples
> 
> ## Not run: 
> ##D set.seed(1)
> ##D data("stock_data")
> ##D data("news_data")
> ##D y=as.matrix(stock_data[,2])
> ##D w=as.matrix(stock_data[,3])
> ##D data("news_data")
> ##D X=news_data[,2:ncol(news_data)]
> ##D x=as.matrix(X)
> ##D grid_alphas=seq(by=0.05,to=0.95,from=0.05)
> ##D cont_folds=TRUE
> ##D t=length(y)
> ##D optimal_alphas=optimal_alphas(x[1:(t-1),],w[1:(t-1),],y[2:t],grid_alphas,TRUE,"gaussian")
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("optimal_alphas", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("optimal_number_factors")
> ### * optimal_number_factors
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: optimal_number_factors
> ### Title: optimal number of factors function
> ### Aliases: optimal_number_factors
> 
> ### ** Examples
> 
> data("optimal_x")
> optimal_factor <- optimal_number_factors(x=optimal_x,kmax=8)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("optimal_number_factors", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("text_forecast")
> ### * text_forecast
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: text_forecast
> ### Title: Text Forecast function
> ### Aliases: text_forecast
> 
> ### ** Examples
> 
> set.seed(1)
> data("stock_data")
> data("news_data")
> y=as.matrix(stock_data[,2])
> w=as.matrix(stock_data[,3])
> data("news_data")
> data("optimal_factors")
> pc=optimal_factors
> z=cbind(w,pc)
> fcsts=text_forecast(z,y,1,TRUE)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("text_forecast", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("text_nowcast")
> ### * text_nowcast
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: text_nowcast
> ### Title: text nowcast
> ### Aliases: text_nowcast
> 
> ### ** Examples
> 
> set.seed(1)
> data("stock_data")
> data("news_data")
> y=as.matrix(stock_data[,2])
> w=as.matrix(stock_data[,3])
> data("news_data")
> data("optimal_factors")
> pc=optimal_factors
> z=cbind(w,pc)
> t=length(y)
> ncsts=text_nowcast(z,y[1:(t-1)],TRUE)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("text_nowcast", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("tf_idf")
> ### * tf_idf
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: tf_idf
> ### Title: tf-idf function
> ### Aliases: tf_idf
> 
> ### ** Examples
> 
> data("news_data")
> X=as.matrix(news_data[,2:ncol(news_data)])
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("tf_idf", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("top_terms")
> ### * top_terms
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: top_terms
> ### Title: Top Terms Function
> ### Aliases: top_terms
> 
> ### ** Examples
> 
> set.seed(1)
> data("stock_data")
> data("news_data")
> y=as.matrix(stock_data[,2])
> w=as.matrix(stock_data[,3])
> data("news_data")
> X=news_data[,2:ncol(news_data)]
> x=as.matrix(X)
> grid_alphas=seq(by=0.05,to=0.95,from=0.05)
> cont_folds=TRUE
> t=length(y)
> optimal_alphas=optimal_alphas(x[1:(t-1),],w[1:(t-1),],y[2:t],grid_alphas,TRUE,"gaussian")
[1] 1
[1] 2
[1] 3
[1] 4
[1] 5
[1] 6
[1] 7
[1] 8
[1] 9
[1] 10
[1] 11
[1] 12
[1] 13
[1] 14
[1] 15
[1] 16
[1] 17
[1] 18
[1] 19
> top_trms<- top_terms(x[1:(t-1),],w[1:(t-1),],y[2:t],optimal_alphas[[1]],optimal_alphas[[2]],10,TRUE,10,c(5,0.15),.15,"gaussian")
Warning in wordcloud(top_coefs, freqs, colors = pal2, random.order = FALSE,  :
  chairman alan greenspan could not be fit on page. It will not be plotted.
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("top_terms", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("tv_dictionary")
> ### * tv_dictionary
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: tv_dictionary
> ### Title: tv dictionary function
> ### Aliases: tv_dictionary
> 
> ### ** Examples
> 
> ## Not run: 
> ##D set.seed(1)
> ##D data("stock_data")
> ##D data("news_data")
> ##D y=as.matrix(stock_data[,2])
> ##D w=as.matrix(stock_data[,3])
> ##D data("news_data")
> ##D X=news_data[,2:ncol(news_data)]
> ##D x=as.matrix(X)
> ##D grid_alphas=seq(by=0.05,to=0.95,from=0.05)
> ##D cont_folds=TRUE
> ##D t=length(y)
> ##D optimal_alphas=optimal_alphas(x[1:(t-1),],w[1:(t-1),],y[2:t],grid_alphas,TRUE,"gaussian")
> ##D x_star=tv_dictionary(x=x[1:(t-1),],w=w[1:(t-1),],y=y[2:t],alpha=optimal_alphas[1],lambda=optimal_alphas[2],newx=x,family="gaussian")
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("tv_dictionary", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("tv_sentiment_index")
> ### * tv_sentiment_index
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: tv_sentiment_index
> ### Title: tv sentiment index function
> ### Aliases: tv_sentiment_index
> 
> ### ** Examples
> 
> set.seed(1)
> data("stock_data")
> data("news_data")
> y=as.matrix(stock_data[,2])
> w=as.matrix(stock_data[,3])
> data("news_data")
> X=news_data[,2:ncol(news_data)]
> x=as.matrix(X)
> grid_alphas=seq(by=0.05,to=0.95,from=0.05)
> cont_folds=TRUE
> t=length(y)
> optimal_alphas=optimal_alphas(x[1:(t-1),],w[1:(t-1),],y[2:t],grid_alphas,TRUE,"gaussian")
[1] 1
[1] 2
[1] 3
[1] 4
[1] 5
[1] 6
[1] 7
[1] 8
[1] 9
[1] 10
[1] 11
[1] 12
[1] 13
[1] 14
[1] 15
[1] 16
[1] 17
[1] 18
[1] 19
> tv_index <- tv_sentiment_index(x[1:(t-1),],w[1:(t-1),],y[2:t],optimal_alphas[[1]],optimal_alphas[[2]],x,"gaussian",2)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("tv_sentiment_index", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> ### * <FOOTER>
> ###
> cleanEx()

detaching ‘package:bindrcpp’

> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  82.437 3.3 86.205 0.002 0.002 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
